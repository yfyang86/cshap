// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// as_SNPv
IntegerVector as_SNPv(int x, int q);
RcppExport SEXP _cshap_as_SNPv(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(as_SNPv(x, q));
    return rcpp_result_gen;
END_RCPP
}
// as_LSNPv
IntegerVector as_LSNPv(long int x, int q);
RcppExport SEXP _cshap_as_LSNPv(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(as_LSNPv(x, q));
    return rcpp_result_gen;
END_RCPP
}
// haplo
IntegerMatrix haplo(int q);
RcppExport SEXP _cshap_haplo(SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(haplo(q));
    return rcpp_result_gen;
END_RCPP
}
// haplo2
IntegerMatrix haplo2(int q, IntegerVector htn);
RcppExport SEXP _cshap_haplo2(SEXP qSEXP, SEXP htnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type htn(htnSEXP);
    rcpp_result_gen = Rcpp::wrap(haplo2(q, htn));
    return rcpp_result_gen;
END_RCPP
}
// create_psi
IntegerMatrix create_psi(int q);
RcppExport SEXP _cshap_create_psi(SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(create_psi(q));
    return rcpp_result_gen;
END_RCPP
}
// l2norm
double l2norm(NumericVector x);
RcppExport SEXP _cshap_l2norm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(l2norm(x));
    return rcpp_result_gen;
END_RCPP
}
// l2normM
NumericVector l2normM(NumericMatrix A);
RcppExport SEXP _cshap_l2normM(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(l2normM(A));
    return rcpp_result_gen;
END_RCPP
}
// create_RM
List create_RM(int q);
RcppExport SEXP _cshap_create_RM(SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(create_RM(q));
    return rcpp_result_gen;
END_RCPP
}
// haplo2RM
List haplo2RM(IntegerMatrix H);
RcppExport SEXP _cshap_haplo2RM(SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(haplo2RM(H));
    return rcpp_result_gen;
END_RCPP
}
// countint
IntegerVector countint(IntegerVector ux, IntegerVector x);
RcppExport SEXP _cshap_countint(SEXP uxSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type ux(uxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(countint(ux, x));
    return rcpp_result_gen;
END_RCPP
}
// countint_detail
List countint_detail(IntegerVector ux, IntegerVector x);
RcppExport SEXP _cshap_countint_detail(SEXP uxSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type ux(uxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(countint_detail(ux, x));
    return rcpp_result_gen;
END_RCPP
}
// match_row
LogicalVector match_row(IntegerVector x, IntegerMatrix A);
RcppExport SEXP _cshap_match_row(SEXP xSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(match_row(x, A));
    return rcpp_result_gen;
END_RCPP
}
// count_row
int count_row(IntegerVector x, IntegerMatrix A);
RcppExport SEXP _cshap_count_row(SEXP xSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(count_row(x, A));
    return rcpp_result_gen;
END_RCPP
}
// count_row_mat
IntegerVector count_row_mat(IntegerMatrix uA, IntegerMatrix A);
RcppExport SEXP _cshap_count_row_mat(SEXP uASEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type uA(uASEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(count_row_mat(uA, A));
    return rcpp_result_gen;
END_RCPP
}
// which_row
int which_row(IntegerVector x, IntegerMatrix A);
RcppExport SEXP _cshap_which_row(SEXP xSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(which_row(x, A));
    return rcpp_result_gen;
END_RCPP
}
// count_row_mat_detail
List count_row_mat_detail(IntegerMatrix uA, IntegerMatrix A);
RcppExport SEXP _cshap_count_row_mat_detail(SEXP uASEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type uA(uASEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(count_row_mat_detail(uA, A));
    return rcpp_result_gen;
END_RCPP
}
// match_col
LogicalVector match_col(IntegerVector x, IntegerMatrix A);
RcppExport SEXP _cshap_match_col(SEXP xSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(match_col(x, A));
    return rcpp_result_gen;
END_RCPP
}
// count_col
int count_col(IntegerVector x, IntegerMatrix A);
RcppExport SEXP _cshap_count_col(SEXP xSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(count_col(x, A));
    return rcpp_result_gen;
END_RCPP
}
// count_col_mat
IntegerVector count_col_mat(IntegerMatrix uA, IntegerMatrix A);
RcppExport SEXP _cshap_count_col_mat(SEXP uASEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type uA(uASEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(count_col_mat(uA, A));
    return rcpp_result_gen;
END_RCPP
}
// which_col
int which_col(IntegerVector x, IntegerMatrix A);
RcppExport SEXP _cshap_which_col(SEXP xSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(which_col(x, A));
    return rcpp_result_gen;
END_RCPP
}
// count_col_mat_detail
List count_col_mat_detail(IntegerMatrix uA, IntegerMatrix A);
RcppExport SEXP _cshap_count_col_mat_detail(SEXP uASEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type uA(uASEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(count_col_mat_detail(uA, A));
    return rcpp_result_gen;
END_RCPP
}
// ligation_vec
IntegerVector ligation_vec(IntegerVector a, IntegerVector b);
RcppExport SEXP _cshap_ligation_vec(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(ligation_vec(a, b));
    return rcpp_result_gen;
END_RCPP
}
// rep1_mat
IntegerMatrix rep1_mat(IntegerMatrix A, int n);
RcppExport SEXP _cshap_rep1_mat(SEXP ASEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rep1_mat(A, n));
    return rcpp_result_gen;
END_RCPP
}
// rep1_mat_fast
IntegerMatrix rep1_mat_fast(IntegerMatrix A, int n);
RcppExport SEXP _cshap_rep1_mat_fast(SEXP ASEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rep1_mat_fast(A, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cshap_as_SNPv", (DL_FUNC) &_cshap_as_SNPv, 2},
    {"_cshap_as_LSNPv", (DL_FUNC) &_cshap_as_LSNPv, 2},
    {"_cshap_haplo", (DL_FUNC) &_cshap_haplo, 1},
    {"_cshap_haplo2", (DL_FUNC) &_cshap_haplo2, 2},
    {"_cshap_create_psi", (DL_FUNC) &_cshap_create_psi, 1},
    {"_cshap_l2norm", (DL_FUNC) &_cshap_l2norm, 1},
    {"_cshap_l2normM", (DL_FUNC) &_cshap_l2normM, 1},
    {"_cshap_create_RM", (DL_FUNC) &_cshap_create_RM, 1},
    {"_cshap_haplo2RM", (DL_FUNC) &_cshap_haplo2RM, 1},
    {"_cshap_countint", (DL_FUNC) &_cshap_countint, 2},
    {"_cshap_countint_detail", (DL_FUNC) &_cshap_countint_detail, 2},
    {"_cshap_match_row", (DL_FUNC) &_cshap_match_row, 2},
    {"_cshap_count_row", (DL_FUNC) &_cshap_count_row, 2},
    {"_cshap_count_row_mat", (DL_FUNC) &_cshap_count_row_mat, 2},
    {"_cshap_which_row", (DL_FUNC) &_cshap_which_row, 2},
    {"_cshap_count_row_mat_detail", (DL_FUNC) &_cshap_count_row_mat_detail, 2},
    {"_cshap_match_col", (DL_FUNC) &_cshap_match_col, 2},
    {"_cshap_count_col", (DL_FUNC) &_cshap_count_col, 2},
    {"_cshap_count_col_mat", (DL_FUNC) &_cshap_count_col_mat, 2},
    {"_cshap_which_col", (DL_FUNC) &_cshap_which_col, 2},
    {"_cshap_count_col_mat_detail", (DL_FUNC) &_cshap_count_col_mat_detail, 2},
    {"_cshap_ligation_vec", (DL_FUNC) &_cshap_ligation_vec, 2},
    {"_cshap_rep1_mat", (DL_FUNC) &_cshap_rep1_mat, 2},
    {"_cshap_rep1_mat_fast", (DL_FUNC) &_cshap_rep1_mat_fast, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cshap(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
